// Classe Product com nome, preço e código de barras
class Product {
    constructor(name, price, barcode) {
        this.name = name;
        this.price = price;
        this.barcode = barcode;
    }

    // Método para validar o código de barras (12 números)
    validateBarcode() {
        const barcodeRegex = /^\d{12}$/; // Expressão regular que valida o código de barras com 12 dígitos
        return barcodeRegex.test(this.barcode); // Verifica se o código de barras corresponde à regex
    }

    // Método para aplicar o desconto de 10% no preço
    applyDiscount() {
        if (this.validateBarcode()) {
            this.price = this.price * 0.9; // Aplica 10% de desconto
            return true;
        }
        return false;
    }

    // Método assíncrono para verificar se o produto está em estoque
    async isProductInStock() {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                if (this.name === "Phone") {
                    resolve("Produto em estoque.");
                } else {
                    resolve("Produto fora de estoque.");
                }
            }, 2000); // Simulação de chamada à API com tempo de resposta de 2 segundos
        });
    }
}

// Função assíncrona que utiliza a classe Product para realizar as verificações e aplicar o desconto
async function checkProductStatus() {
    const product = new Product("Phone", 1000, "123456789012"); // Produto com código de barras válido

    // Validando o código de barras
    if (!product.validateBarcode()) {
        console.log("Código de barras inválido!");
        return;
    }
    console.log("Código de barras válido.");

    // Aplicando o desconto
    if (product.applyDiscount()) {
        console.log(`Desconto aplicado! Novo preço: R$ ${product.price}`);
    } else {
        console.log("Código de barras inválido, não foi possível aplicar o desconto.");
        return;
    }

    // Verificando o estoque
    const stockStatus = await product.isProductInStock();
    console.log(stockStatus);
}

// Chamando a função para realizar as verificações
checkProductStatus();
